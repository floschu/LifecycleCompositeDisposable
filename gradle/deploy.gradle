apply plugin: "com.jfrog.bintray"

version = System.getenv("libraryVersionTag")
group = "at.florianschuster.lifecyclecompositedisposable"

def settings = new Properties()
file("deploy.properties").withInputStream { settings.load(it) }

project.ext {
    mavProjectName = settings.name
    mavLibraryDescription = settings.description
    mavPublishToMavenLocal = true
    mavSiteUrl = "https://github.com/floschu/LifecycleCompositeDisposable"
    mavGitUrl = mavSiteUrl + ".git"
    mavLibraryLicenses = ["Apache-2.0": 'http://www.apache.org/licenses/LICENSE-2.0.txt']
}

bintray {
    user = System.getenv("bintrayUser")
    key = System.getenv("bintrayApiKey")
    publications = ['mavenPublish']
    configurations = ['archives']
    publish = true
    pkg {
        repo = settings.repo
        name = settings.name
        version {
            released = new Date()
        }
    }
}

// until https://github.com/sky-uk/gradle-maven-plugin/issues/24 is fixed
//apply from: "https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/master/gradle-mavenizer.gradle"

apply plugin: 'maven-publish'

def gradlePluginVersion = project.hasProperty('mavPluginVersion') ? project.mavPluginVersion : 'master'
apply from: "https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/${gradlePluginVersion}/utils.gradle"
apply from: "https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/${gradlePluginVersion}/artifact-javadoc-handler.gradle"
apply from: "https://raw.githubusercontent.com/sky-uk/gradle-maven-plugin/${gradlePluginVersion}/artifact-pom-manager.gradle"

project.afterEvaluate {
    publishing {
        publications {
            if (isAndroidProject()) {
                android.libraryVariants.all { variant ->
                    "maven${variant.name.capitalize()}Publish"(MavenPublication) {
                        artifact project.tasks.findByName("bundle${variant.name.capitalize()}Aar")
                        artifact androidJavadocsJar
                        artifact androidSourcesJar
                    }
                }
            } else {
                mavenPublish(MavenPublication) {
                    artifact jar
                    artifact sourcesJar
                    artifact javadocJar
                }

                decoratePom(pom)
            }
        }

        repositories {
            def isToRemoteRepo = getBooleanProperty("mavPublishToRemoteRepo")
            def isToInternalRepo = getBooleanProperty("mavPublishToInternalRepo")
            def isToMavenLocal = getBooleanProperty("mavPublishToMavenLocal")

            if (isToRemoteRepo) {
                maven {
                    credentials {
                        username getStringProperty("mavRemoteRepoUser")
                        password getStringProperty("mavRemoteRepoPassword")
                    }
                    url = getStringProperty("mavRepoRemoteUrl")
                }
            }

            if (isToInternalRepo) {
                maven {
                    url = getStringProperty("mavRepoInternalUrl")
                }
            }

            if (isToMavenLocal || (!isToInternalRepo && !isToRemoteRepo)) {
                mavenLocal()
            }
        }
    }
}